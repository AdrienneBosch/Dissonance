name: Update Azure DevOps Work Item on PR Merge

on:
  pull_request:
    types: [closed]

jobs:
  update-work-item:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract Work Item ID from PR Body
        id: extract
        run: |
          echo "PR Body:"
          echo "${{ github.event.pull_request.body }}"
          echo "${{ github.event.pull_request.body }}" | grep -o 'AB#[0-9]*' | sed 's/AB#//' > wid.txt || true
          cat wid.txt
          wid=$(cat wid.txt)
          echo "workitem_id=$wid" >> $GITHUB_OUTPUT

      - name: Debug Work Item ID
        run: |
          echo "Extracted Work Item ID: ${{ steps.extract.outputs.workitem_id }}"

      - name: Validate GitHub Secret
        run: |
          if [ -z "${{ secrets.AZURE_DEVOPS_PAT }}" ]; then
            echo "ERROR: AZURE_DEVOPS_PAT secret is not set."
            exit 1
          else
            echo "AZURE_DEVOPS_PAT is set."
          fi

      - name: Update Azure DevOps Work Item State
        if: ${{ steps.extract.outputs.workitem_id != '' }}
        env:
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
          WORK_ITEM_ID: ${{ steps.extract.outputs.workitem_id }}
        run: |
          BASE_URL="https://dev.azure.com/DissonanceCo/Dissonance/_apis/wit/workitems/$WORK_ITEM_ID?api-version=7.0"
          AUTH_HEADER="Authorization: Basic $(echo -n :$AZURE_DEVOPS_PAT | base64)"

          echo "Fetching current work item state..."
          curl -s -H "Content-Type: application/json" -H "$AUTH_HEADER" "$BASE_URL" -o current.json
          cat current.json

          CURRENT_STATE=$(jq -r '.fields["System.State"]' current.json)

          if [ -z "$CURRENT_STATE" ] || [ "$CURRENT_STATE" = "null" ]; then
            echo "ERROR: Could not determine current state from work item data."
            exit 1
          fi

          echo "Current state: $CURRENT_STATE"

          declare -a STATES=("New" "Active" "Resolved" "Closed")

          FOUND=0
          for TARGET_STATE in "${STATES[@]}"; do
            if [ "$FOUND" = "1" ]; then
              echo "Transitioning to '$TARGET_STATE'"
              RESPONSE_CODE=$(curl --write-out "%{http_code}" --silent --output response.json -X PATCH \
                -H "Content-Type: application/json-patch+json" \
                -H "$AUTH_HEADER" \
                --data "[{\"op\": \"replace\", \"path\": \"/fields/System.State\", \"value\": \"$TARGET_STATE\"}]" \
                "$BASE_URL")

              echo "Response Code: $RESPONSE_CODE"
              cat response.json

              if [ "$RESPONSE_CODE" -lt 200 ] || [ "$RESPONSE_CODE" -ge 300 ]; then
                echo "ERROR: Failed to transition to '$TARGET_STATE'"
                exit 1
              fi
            fi

            if [ "$CURRENT_STATE" = "$TARGET_STATE" ]; then
              FOUND=1
            fi
          done

          echo "Final state: Closed"
